parameters:
  - name: jobName
    type: string
  - name: vmImage
    type: string
  - name: solution
    type: string
  - name: buildPlatform
    type: string
  - name: projects
    type: string
  - name: netVersion
    type: string
  - name: useNetVersion
    type: string 
  - name: pre_CI_Steps
    type: stepList
    default: []
  - name: execution
    type: string
    # values:
      # - 'true'
      # - 'false'
    # default: true

jobs:
  - job: ${{ parameters.jobName }}
    condition: eq('${{ parameters.execution }}', 'true')
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
        matrix:
          Debug:
            BUILD_CONFIGURATION: Debug
          Release:
            BUILD_CONFIGURATION: Release
    steps:
       # pre-ci steps
      - ${{ each step in parameters.pre_CI_Steps }}:
        - ${{ each pair in step }}:
            ${{ pair.key }}: ${{ pair.value }}
      # build
      - template: steps_build.yml
        parameters:
          solution: ${{ parameters.solution }}
          buildPlatform: ${{ parameters.buildPlatform }}
          buildConfiguration: $(BUILD_CONFIGURATION)
          useNetVersion: ${{ parameters.useNetVersion }}
      # tests
      - template: steps_tests.yml
        parameters:
          projects: ${{ parameters.projects }}
          netVersion: ${{ parameters.netVersion }}
          buildConfiguration: $(BUILD_CONFIGURATION)
      # check if versions are matching: project, manifest, git tag
      - task: PowerShell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/check-versions.ps1
          targetType: filepath
          failOnStderr: true
          displayName: CheckVersions
          arguments: $(Build.SourceVersion)
        name: CheckVersions
