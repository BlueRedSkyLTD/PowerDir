# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    exclude:
    #- .gitignore
    - .github/*
    - README.md

variables:
  - template: variables/globals.yml
  - template: variables/images.yml

stages:
# - stage: DebugInfo
#   condition:  eq(variables.debug_info, 'true')
#   jobs:
#     - job: ShowVars
#       steps:
#         - script: |
#             echo "*** START ***"
#             echo ${{ variables.windows_image }}
#             echo ${{ variables.linux_image }}
#             echo ${{ variables.mac_image }}
#             echo .
#             echo ${{ variables['Agent.OS'] }}
#             echo .
#             echo $(Agent.OS)
#             echo "*** END ***"

- stage: CheckVersions
  pool:
    vmImage: ${{ variables.windows_image }}
  jobs:
    - job: Module
      steps:
      # check if versions are matching: project, manifest, git tag
      - task: PowerShell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/check-versions.ps1
          targetType: filepath
          failOnStderr: true
          displayName: CheckVersions
          arguments: $(Build.SourceVersion)
        name: CheckVersions

- stage: CI
  jobs:
    - job:
      name: Windows
      condition: eq('${{ variables.ci_windows }}', 'true')
      pool:
      vmImage: ${{ variables.windows_image }}
      strategy:
        matrix:
          Debug:
            buildConfiguration: 'Debug'
          Release:
            buildConfiguration: 'Release'
      steps:
        - template: templates/steps_ci.yml

    - job:
      name: Linux
      condition: eq('${{ variables.ci_linux }}', 'true')
      pool:
      vmImage: ${{ variables.linux_image }}
      strategy:
        matrix:
          Debug:
            buildConfiguration: 'Debug'
          Release:
            buildConfiguration: 'Release'
      steps:
        - template: templates/steps_ci.yml

    - job:
      name: MacOS
      condition: eq('${{ variables.ci_macos }}', 'true')
      pool:
      vmImage: ${{ variables.macos_image }}
      strategy:
        matrix:
          Debug:
            buildConfiguration: 'Debug'
          Release:
            buildConfiguration: 'Release'
      steps:
        - template: templates/steps_ci.yml

- stage: Release
  pool:
    vmImage: ${{ variables.windows_image }}
  variables:
    buildConfiguration: Release
  jobs:
    - job: WindowsRelease
      condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
      steps:
      # check if versions are matching: project, manifest, git tag
      - task: PowerShell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/check-versions-tag.ps1
          targetType: filepath
          failOnStderr: true
          displayName: CheckVersions
          arguments: $(Build.SourceBranch)
        name: CheckVersionsTag
      - task: PowerShell@2
        inputs:
          filePath: $(Build.SourcesDirectory)/check-versions.ps1
          targetType: filepath
          failOnStderr: true
          displayName: CheckVersions
          arguments: $(Build.SourceBranch)
        name: CheckVersions

      ## TODO upload the artifact from the previous stage and use instead.
      - template: templates/steps_ci.yml
      # package
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir'
          contents: '*'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
        # condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
      - pwsh: |
          Install-Module platyps -Force
          Import-Module platyps

          echo "Import PowerDir"
          Import-Module $(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir/PowerDir.GetPowerDir.psd1

          echo "Update Markdown"
          cd PowerDir && ./update-doc.ps1 && cp doc/* '$(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir' -Force

          echo "Module Help"
          New-ExternalHelp -Path '$(System.DefaultWorkingDirectory)/PowerDir/doc' -OutputPath '$(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir' -Force
          echo "Display package directory"
          dir '$(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir'
        name: GenerateModuleHelp

      - task: GithubRelease@1
        displayName: 'Create GitHub Release'
        inputs:
          gitHubConnection: github.com_Raffaello
          repositoryName: '$(Build.Repository.Name)'
          action: 'edit'
          target: '$(Build.SourceVersion)'
          tagSource: manual
          tag: $(Build.SourceBranchName)
          title: $(Build.SourceBranchName)
          isDraft: false
          assetUploadMode: 'replace'
          addChangeLog: true
          compareWith: 'lastFullRelease'
          assets: '$(Build.ArtifactStagingDirectory)/*'
        # condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
      # Publishing to Powershell Gallery
      - pwsh: |
          Publish-Module -Path $(System.DefaultWorkingDirectory)/PowerDir/bin/${{ variables.buildConfiguration }}/${{ variables.netVersion }}/PowerDir.GetPowerDir -NuGetApiKey ${env:PWSH_PUBLISH}
        name: PublishModule
        env:
         PWSH_PUBLISH: $(pwsh_publish)
